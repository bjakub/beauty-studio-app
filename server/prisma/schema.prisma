generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserDetails {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String?
  email      String?
  createdAt  DateTime @default(now())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int      @unique
  client     Client   @relation(fields: [clientId], references: [id])
  clientId   Int      @unique
}

model Client {
  id          Int          @id @default(autoincrement())
  phoneNumber Int          @unique
  password    String?
  isActive    Boolean
  createdAt   DateTime     @default(now())
  UserDetails UserDetails?
  Reservation Reservation?
}

model Employee {
  id                Int                 @id @default(autoincrement())
  username          String              @unique
  password          String
  isActive          Boolean
  role              EmployeeRole
  experience        EmployeeExperience
  createdAt         DateTime            @default(now())
  userDetails       UserDetails?
  serviceOnEmployee ServiceOnEmployee[]
  Reservation       Reservation[]
}

model Service {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  price             Float
  duration          Int
  createdAt         DateTime            @default(now())
  ServiceOnEmployee ServiceOnEmployee[]
  Reservation       Reservation[]
  serviceType       ServiceType         @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId     Int
}

model ServiceOnEmployee {
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  Int
  createdAt  DateTime @default(now())

  @@id([employeeId, serviceId])
}

model ServiceType {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  services  Service[]
}

model Reservation {
  id         Int               @id @default(autoincrement())
  startTime  DateTime
  duration   Int
  status     ReservationStatus
  discount   Float
  createdAt  DateTime          @default(now())
  client     Client            @relation(fields: [clientId], references: [id])
  clientId   Int               @unique
  service    Service           @relation(fields: [serviceId], references: [id])
  serviceId  Int
  employee   Employee          @relation(fields: [employeeId], references: [id])
  employeeId Int
}

enum EmployeeRole {
  OWNER
  WORKER
}

enum EmployeeExperience {
  INTERN
  MIDDLE
  SENIOR
}

enum ReservationStatus {
  ACTIVE
  CANCELED
  UNCANCELED
  COMPLETED
}
